{"version":3,"names":[],"mappings":"","sources":["providers/digitalocean/index.js"],"sourcesContent":["import _ from 'lodash';\n\nconst blacklist = {locations: ['nyc2']};\n\nmodule.exports = (DOWrapper, DOToken) => {\n  const api = new DOWrapper(DOToken);\n\n  return Promise.all([\n    promise(api.sizesGetAll.bind(api))\n      .then(transformSizes)\n  ,\n    promise(api.regionsGetAll.bind(api))\n      .then(transformRegions)\n  ])\n  .then(makeProfile);\n\n  function promise(fn, ...args) {\n    return new Promise((resolve, reject) => {\n      fn(...args, (error, ...rest) => {\n        if (error) reject(error);\n        else resolve(...rest);\n      });\n    });\n  }\n\n  function transformSizes(sizes) {\n    return new Promise((resolve, reject) => {\n      resolve(_.transform(sizes.sizes, (sizes, size) => {\n        const {slug: id, memory, vcpus: cpus, disk, transfer, price_monthly, price_hourly, regions: locations} = size;\n        sizes[id] = {\n          id,\n          memory,\n          cpus,\n          disk,\n          transfer,\n          price_monthly,\n          price_hourly,\n          locations\n        };\n      }, {}));\n    });\n  }\n\n  function transformRegions(regions) {\n    return new Promise((resolve, reject) => {\n      resolve(_.transform(_.where(regions.regions, {available: true}), (regions, region) => {\n        const {slug: id, name, sizes, available} = region;\n        regions[id] = {\n          id,\n          vicinity: name,\n          sizes\n        };\n      }, {}));\n    });\n  }\n\n  function makeProfile(values) {\n    const [sizes, locations] = values;\n    return {\n      name: 'DigitalOcean',\n      sizes,\n      locations: _.omit(locations, blacklist.locations || [])\n    };\n  }\n};\n"],"file":"index.js"}